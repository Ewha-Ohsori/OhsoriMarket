// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteConfigEndpointHandlerFunc turns a function with the right signature into a delete config endpoint handler
type DeleteConfigEndpointHandlerFunc func(DeleteConfigEndpointParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteConfigEndpointHandlerFunc) Handle(params DeleteConfigEndpointParams) middleware.Responder {
	return fn(params)
}

// DeleteConfigEndpointHandler interface for that can handle valid delete config endpoint params
type DeleteConfigEndpointHandler interface {
	Handle(DeleteConfigEndpointParams) middleware.Responder
}

// NewDeleteConfigEndpoint creates a new http.Handler for the delete config endpoint operation
func NewDeleteConfigEndpoint(ctx *middleware.Context, handler DeleteConfigEndpointHandler) *DeleteConfigEndpoint {
	return &DeleteConfigEndpoint{Context: ctx, Handler: handler}
}

/*
	DeleteConfigEndpoint swagger:route DELETE /config/endpoint/ deleteConfigEndpoint

# Delete an LB end-point from monitoring

Delete an LB end-point from monitoring
*/
type DeleteConfigEndpoint struct {
	Context *middleware.Context
	Handler DeleteConfigEndpointHandler
}

func (o *DeleteConfigEndpoint) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteConfigEndpointParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
