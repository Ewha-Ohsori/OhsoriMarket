// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteConfigIpv4addressIPAddressHandlerFunc turns a function with the right signature into a delete config ipv4address IP address handler
type DeleteConfigIpv4addressIPAddressHandlerFunc func(DeleteConfigIpv4addressIPAddressParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteConfigIpv4addressIPAddressHandlerFunc) Handle(params DeleteConfigIpv4addressIPAddressParams) middleware.Responder {
	return fn(params)
}

// DeleteConfigIpv4addressIPAddressHandler interface for that can handle valid delete config ipv4address IP address params
type DeleteConfigIpv4addressIPAddressHandler interface {
	Handle(DeleteConfigIpv4addressIPAddressParams) middleware.Responder
}

// NewDeleteConfigIpv4addressIPAddress creates a new http.Handler for the delete config ipv4address IP address operation
func NewDeleteConfigIpv4addressIPAddress(ctx *middleware.Context, handler DeleteConfigIpv4addressIPAddressHandler) *DeleteConfigIpv4addressIPAddress {
	return &DeleteConfigIpv4addressIPAddress{Context: ctx, Handler: handler}
}

/*
	DeleteConfigIpv4addressIPAddress swagger:route DELETE /config/ipv4address/{ip_address} deleteConfigIpv4addressIpAddress

# Delete IPv4 addresses in the device

Delete IPv4 addresses in the device
*/
type DeleteConfigIpv4addressIPAddress struct {
	Context *middleware.Context
	Handler DeleteConfigIpv4addressIPAddressHandler
}

func (o *DeleteConfigIpv4addressIPAddress) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteConfigIpv4addressIPAddressParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
