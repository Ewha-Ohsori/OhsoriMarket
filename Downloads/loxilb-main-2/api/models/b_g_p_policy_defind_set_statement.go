// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BGPPolicyDefindSetStatement b g p policy defind set statement
//
// swagger:model BGPPolicyDefindSetStatement
type BGPPolicyDefindSetStatement struct {

	// actions
	Actions *BGPPolicyDefindSetStatementActions `json:"actions,omitempty"`

	// conditions
	Conditions *BGPPolicyDefindSetStatementConditions `json:"conditions,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this b g p policy defind set statement
func (m *BGPPolicyDefindSetStatement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicyDefindSetStatement) validateActions(formats strfmt.Registry) error {
	if swag.IsZero(m.Actions) { // not required
		return nil
	}

	if m.Actions != nil {
		if err := m.Actions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefindSetStatement) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	if m.Conditions != nil {
		if err := m.Conditions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this b g p policy defind set statement based on the context it is used
func (m *BGPPolicyDefindSetStatement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicyDefindSetStatement) contextValidateActions(ctx context.Context, formats strfmt.Registry) error {

	if m.Actions != nil {
		if err := m.Actions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefindSetStatement) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	if m.Conditions != nil {
		if err := m.Conditions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatement) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefindSetStatement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefindSetStatementActions b g p policy defind set statement actions
//
// swagger:model BGPPolicyDefindSetStatementActions
type BGPPolicyDefindSetStatementActions struct {

	// bgp actions
	BgpActions *BGPPolicyDefindSetStatementActionsBgpActions `json:"bgpActions,omitempty"`

	// route disposition
	RouteDisposition string `json:"routeDisposition,omitempty"`
}

// Validate validates this b g p policy defind set statement actions
func (m *BGPPolicyDefindSetStatementActions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBgpActions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicyDefindSetStatementActions) validateBgpActions(formats strfmt.Registry) error {
	if swag.IsZero(m.BgpActions) { // not required
		return nil
	}

	if m.BgpActions != nil {
		if err := m.BgpActions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this b g p policy defind set statement actions based on the context it is used
func (m *BGPPolicyDefindSetStatementActions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBgpActions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicyDefindSetStatementActions) contextValidateBgpActions(ctx context.Context, formats strfmt.Registry) error {

	if m.BgpActions != nil {
		if err := m.BgpActions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementActions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementActions) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefindSetStatementActions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefindSetStatementActionsBgpActions b g p policy defind set statement actions bgp actions
//
// swagger:model BGPPolicyDefindSetStatementActionsBgpActions
type BGPPolicyDefindSetStatementActionsBgpActions struct {

	// set as path prepend
	SetAsPathPrepend *BGPPolicyDefindSetStatementActionsBgpActionsSetAsPathPrepend `json:"setAsPathPrepend,omitempty"`

	// set community
	SetCommunity *BGPPolicyDefindSetStatementActionsBgpActionsSetCommunity `json:"setCommunity,omitempty"`

	// set ext community
	SetExtCommunity *BGPPolicyDefindSetStatementActionsBgpActionsSetExtCommunity `json:"setExtCommunity,omitempty"`

	// set large community
	SetLargeCommunity *BGPPolicyDefindSetStatementActionsBgpActionsSetLargeCommunity `json:"setLargeCommunity,omitempty"`

	// set local perf
	SetLocalPerf int64 `json:"setLocalPerf,omitempty"`

	// set med
	SetMed string `json:"setMed,omitempty"`

	// set next hop
	SetNextHop string `json:"setNextHop,omitempty"`
}

// Validate validates this b g p policy defind set statement actions bgp actions
func (m *BGPPolicyDefindSetStatementActionsBgpActions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSetAsPathPrepend(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSetCommunity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSetExtCommunity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSetLargeCommunity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicyDefindSetStatementActionsBgpActions) validateSetAsPathPrepend(formats strfmt.Registry) error {
	if swag.IsZero(m.SetAsPathPrepend) { // not required
		return nil
	}

	if m.SetAsPathPrepend != nil {
		if err := m.SetAsPathPrepend.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions" + "." + "setAsPathPrepend")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions" + "." + "setAsPathPrepend")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefindSetStatementActionsBgpActions) validateSetCommunity(formats strfmt.Registry) error {
	if swag.IsZero(m.SetCommunity) { // not required
		return nil
	}

	if m.SetCommunity != nil {
		if err := m.SetCommunity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions" + "." + "setCommunity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions" + "." + "setCommunity")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefindSetStatementActionsBgpActions) validateSetExtCommunity(formats strfmt.Registry) error {
	if swag.IsZero(m.SetExtCommunity) { // not required
		return nil
	}

	if m.SetExtCommunity != nil {
		if err := m.SetExtCommunity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions" + "." + "setExtCommunity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions" + "." + "setExtCommunity")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefindSetStatementActionsBgpActions) validateSetLargeCommunity(formats strfmt.Registry) error {
	if swag.IsZero(m.SetLargeCommunity) { // not required
		return nil
	}

	if m.SetLargeCommunity != nil {
		if err := m.SetLargeCommunity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions" + "." + "setLargeCommunity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions" + "." + "setLargeCommunity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this b g p policy defind set statement actions bgp actions based on the context it is used
func (m *BGPPolicyDefindSetStatementActionsBgpActions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSetAsPathPrepend(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSetCommunity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSetExtCommunity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSetLargeCommunity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicyDefindSetStatementActionsBgpActions) contextValidateSetAsPathPrepend(ctx context.Context, formats strfmt.Registry) error {

	if m.SetAsPathPrepend != nil {
		if err := m.SetAsPathPrepend.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions" + "." + "setAsPathPrepend")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions" + "." + "setAsPathPrepend")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefindSetStatementActionsBgpActions) contextValidateSetCommunity(ctx context.Context, formats strfmt.Registry) error {

	if m.SetCommunity != nil {
		if err := m.SetCommunity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions" + "." + "setCommunity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions" + "." + "setCommunity")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefindSetStatementActionsBgpActions) contextValidateSetExtCommunity(ctx context.Context, formats strfmt.Registry) error {

	if m.SetExtCommunity != nil {
		if err := m.SetExtCommunity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions" + "." + "setExtCommunity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions" + "." + "setExtCommunity")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefindSetStatementActionsBgpActions) contextValidateSetLargeCommunity(ctx context.Context, formats strfmt.Registry) error {

	if m.SetLargeCommunity != nil {
		if err := m.SetLargeCommunity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions" + "." + "setLargeCommunity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions" + "." + "setLargeCommunity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementActionsBgpActions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementActionsBgpActions) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefindSetStatementActionsBgpActions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefindSetStatementActionsBgpActionsSetAsPathPrepend b g p policy defind set statement actions bgp actions set as path prepend
//
// swagger:model BGPPolicyDefindSetStatementActionsBgpActionsSetAsPathPrepend
type BGPPolicyDefindSetStatementActionsBgpActionsSetAsPathPrepend struct {

	// as
	As string `json:"as,omitempty"`

	// repeat n
	RepeatN int64 `json:"repeatN,omitempty"`
}

// Validate validates this b g p policy defind set statement actions bgp actions set as path prepend
func (m *BGPPolicyDefindSetStatementActionsBgpActionsSetAsPathPrepend) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policy defind set statement actions bgp actions set as path prepend based on context it is used
func (m *BGPPolicyDefindSetStatementActionsBgpActionsSetAsPathPrepend) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementActionsBgpActionsSetAsPathPrepend) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementActionsBgpActionsSetAsPathPrepend) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefindSetStatementActionsBgpActionsSetAsPathPrepend
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefindSetStatementActionsBgpActionsSetCommunity b g p policy defind set statement actions bgp actions set community
//
// swagger:model BGPPolicyDefindSetStatementActionsBgpActionsSetCommunity
type BGPPolicyDefindSetStatementActionsBgpActionsSetCommunity struct {

	// options
	Options string `json:"options,omitempty"`

	// set community method
	SetCommunityMethod []string `json:"setCommunityMethod"`
}

// Validate validates this b g p policy defind set statement actions bgp actions set community
func (m *BGPPolicyDefindSetStatementActionsBgpActionsSetCommunity) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policy defind set statement actions bgp actions set community based on context it is used
func (m *BGPPolicyDefindSetStatementActionsBgpActionsSetCommunity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementActionsBgpActionsSetCommunity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementActionsBgpActionsSetCommunity) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefindSetStatementActionsBgpActionsSetCommunity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefindSetStatementActionsBgpActionsSetExtCommunity b g p policy defind set statement actions bgp actions set ext community
//
// swagger:model BGPPolicyDefindSetStatementActionsBgpActionsSetExtCommunity
type BGPPolicyDefindSetStatementActionsBgpActionsSetExtCommunity struct {

	// options
	Options string `json:"options,omitempty"`

	// set community method
	SetCommunityMethod []string `json:"setCommunityMethod"`
}

// Validate validates this b g p policy defind set statement actions bgp actions set ext community
func (m *BGPPolicyDefindSetStatementActionsBgpActionsSetExtCommunity) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policy defind set statement actions bgp actions set ext community based on context it is used
func (m *BGPPolicyDefindSetStatementActionsBgpActionsSetExtCommunity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementActionsBgpActionsSetExtCommunity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementActionsBgpActionsSetExtCommunity) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefindSetStatementActionsBgpActionsSetExtCommunity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefindSetStatementActionsBgpActionsSetLargeCommunity b g p policy defind set statement actions bgp actions set large community
//
// swagger:model BGPPolicyDefindSetStatementActionsBgpActionsSetLargeCommunity
type BGPPolicyDefindSetStatementActionsBgpActionsSetLargeCommunity struct {

	// options
	Options string `json:"options,omitempty"`

	// set community method
	SetCommunityMethod []string `json:"setCommunityMethod"`
}

// Validate validates this b g p policy defind set statement actions bgp actions set large community
func (m *BGPPolicyDefindSetStatementActionsBgpActionsSetLargeCommunity) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policy defind set statement actions bgp actions set large community based on context it is used
func (m *BGPPolicyDefindSetStatementActionsBgpActionsSetLargeCommunity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementActionsBgpActionsSetLargeCommunity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementActionsBgpActionsSetLargeCommunity) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefindSetStatementActionsBgpActionsSetLargeCommunity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefindSetStatementConditions b g p policy defind set statement conditions
//
// swagger:model BGPPolicyDefindSetStatementConditions
type BGPPolicyDefindSetStatementConditions struct {

	// bgp conditions
	BgpConditions *BGPPolicyDefindSetStatementConditionsBgpConditions `json:"bgpConditions,omitempty"`

	// match neighbor set
	MatchNeighborSet *BGPPolicyDefindSetStatementConditionsMatchNeighborSet `json:"matchNeighborSet,omitempty"`

	// match prefix set
	MatchPrefixSet *BGPPolicyDefindSetStatementConditionsMatchPrefixSet `json:"matchPrefixSet,omitempty"`
}

// Validate validates this b g p policy defind set statement conditions
func (m *BGPPolicyDefindSetStatementConditions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBgpConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchNeighborSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchPrefixSet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicyDefindSetStatementConditions) validateBgpConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.BgpConditions) { // not required
		return nil
	}

	if m.BgpConditions != nil {
		if err := m.BgpConditions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefindSetStatementConditions) validateMatchNeighborSet(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchNeighborSet) { // not required
		return nil
	}

	if m.MatchNeighborSet != nil {
		if err := m.MatchNeighborSet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "matchNeighborSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "matchNeighborSet")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefindSetStatementConditions) validateMatchPrefixSet(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchPrefixSet) { // not required
		return nil
	}

	if m.MatchPrefixSet != nil {
		if err := m.MatchPrefixSet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "matchPrefixSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "matchPrefixSet")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this b g p policy defind set statement conditions based on the context it is used
func (m *BGPPolicyDefindSetStatementConditions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBgpConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatchNeighborSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatchPrefixSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicyDefindSetStatementConditions) contextValidateBgpConditions(ctx context.Context, formats strfmt.Registry) error {

	if m.BgpConditions != nil {
		if err := m.BgpConditions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefindSetStatementConditions) contextValidateMatchNeighborSet(ctx context.Context, formats strfmt.Registry) error {

	if m.MatchNeighborSet != nil {
		if err := m.MatchNeighborSet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "matchNeighborSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "matchNeighborSet")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefindSetStatementConditions) contextValidateMatchPrefixSet(ctx context.Context, formats strfmt.Registry) error {

	if m.MatchPrefixSet != nil {
		if err := m.MatchPrefixSet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "matchPrefixSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "matchPrefixSet")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementConditions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementConditions) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefindSetStatementConditions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefindSetStatementConditionsBgpConditions b g p policy defind set statement conditions bgp conditions
//
// swagger:model BGPPolicyDefindSetStatementConditionsBgpConditions
type BGPPolicyDefindSetStatementConditionsBgpConditions struct {

	// afi safi in
	AfiSafiIn []string `json:"afiSafiIn"`

	// as path length
	AsPathLength *BGPPolicyDefindSetStatementConditionsBgpConditionsAsPathLength `json:"asPathLength,omitempty"`

	// match as path set
	MatchAsPathSet *BGPPolicyDefindSetStatementConditionsBgpConditionsMatchAsPathSet `json:"matchAsPathSet,omitempty"`

	// match community set
	MatchCommunitySet *BGPPolicyDefindSetStatementConditionsBgpConditionsMatchCommunitySet `json:"matchCommunitySet,omitempty"`

	// match ext community set
	MatchExtCommunitySet *BGPPolicyDefindSetStatementConditionsBgpConditionsMatchExtCommunitySet `json:"matchExtCommunitySet,omitempty"`

	// match large community set
	MatchLargeCommunitySet *BGPPolicyDefindSetStatementConditionsBgpConditionsMatchLargeCommunitySet `json:"matchLargeCommunitySet,omitempty"`

	// next hop in list
	NextHopInList []string `json:"nextHopInList"`

	// route type
	RouteType string `json:"routeType,omitempty"`

	// rpki
	Rpki string `json:"rpki,omitempty"`
}

// Validate validates this b g p policy defind set statement conditions bgp conditions
func (m *BGPPolicyDefindSetStatementConditionsBgpConditions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAsPathLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchAsPathSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchCommunitySet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchExtCommunitySet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchLargeCommunitySet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicyDefindSetStatementConditionsBgpConditions) validateAsPathLength(formats strfmt.Registry) error {
	if swag.IsZero(m.AsPathLength) { // not required
		return nil
	}

	if m.AsPathLength != nil {
		if err := m.AsPathLength.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "asPathLength")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "asPathLength")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefindSetStatementConditionsBgpConditions) validateMatchAsPathSet(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchAsPathSet) { // not required
		return nil
	}

	if m.MatchAsPathSet != nil {
		if err := m.MatchAsPathSet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchAsPathSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchAsPathSet")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefindSetStatementConditionsBgpConditions) validateMatchCommunitySet(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchCommunitySet) { // not required
		return nil
	}

	if m.MatchCommunitySet != nil {
		if err := m.MatchCommunitySet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchCommunitySet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchCommunitySet")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefindSetStatementConditionsBgpConditions) validateMatchExtCommunitySet(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchExtCommunitySet) { // not required
		return nil
	}

	if m.MatchExtCommunitySet != nil {
		if err := m.MatchExtCommunitySet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchExtCommunitySet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchExtCommunitySet")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefindSetStatementConditionsBgpConditions) validateMatchLargeCommunitySet(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchLargeCommunitySet) { // not required
		return nil
	}

	if m.MatchLargeCommunitySet != nil {
		if err := m.MatchLargeCommunitySet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchLargeCommunitySet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchLargeCommunitySet")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this b g p policy defind set statement conditions bgp conditions based on the context it is used
func (m *BGPPolicyDefindSetStatementConditionsBgpConditions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAsPathLength(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatchAsPathSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatchCommunitySet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatchExtCommunitySet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatchLargeCommunitySet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicyDefindSetStatementConditionsBgpConditions) contextValidateAsPathLength(ctx context.Context, formats strfmt.Registry) error {

	if m.AsPathLength != nil {
		if err := m.AsPathLength.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "asPathLength")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "asPathLength")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefindSetStatementConditionsBgpConditions) contextValidateMatchAsPathSet(ctx context.Context, formats strfmt.Registry) error {

	if m.MatchAsPathSet != nil {
		if err := m.MatchAsPathSet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchAsPathSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchAsPathSet")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefindSetStatementConditionsBgpConditions) contextValidateMatchCommunitySet(ctx context.Context, formats strfmt.Registry) error {

	if m.MatchCommunitySet != nil {
		if err := m.MatchCommunitySet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchCommunitySet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchCommunitySet")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefindSetStatementConditionsBgpConditions) contextValidateMatchExtCommunitySet(ctx context.Context, formats strfmt.Registry) error {

	if m.MatchExtCommunitySet != nil {
		if err := m.MatchExtCommunitySet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchExtCommunitySet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchExtCommunitySet")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefindSetStatementConditionsBgpConditions) contextValidateMatchLargeCommunitySet(ctx context.Context, formats strfmt.Registry) error {

	if m.MatchLargeCommunitySet != nil {
		if err := m.MatchLargeCommunitySet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchLargeCommunitySet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchLargeCommunitySet")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementConditionsBgpConditions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementConditionsBgpConditions) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefindSetStatementConditionsBgpConditions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefindSetStatementConditionsBgpConditionsAsPathLength b g p policy defind set statement conditions bgp conditions as path length
//
// swagger:model BGPPolicyDefindSetStatementConditionsBgpConditionsAsPathLength
type BGPPolicyDefindSetStatementConditionsBgpConditionsAsPathLength struct {

	// operator
	Operator string `json:"operator,omitempty"`

	// value
	Value int64 `json:"value,omitempty"`
}

// Validate validates this b g p policy defind set statement conditions bgp conditions as path length
func (m *BGPPolicyDefindSetStatementConditionsBgpConditionsAsPathLength) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policy defind set statement conditions bgp conditions as path length based on context it is used
func (m *BGPPolicyDefindSetStatementConditionsBgpConditionsAsPathLength) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementConditionsBgpConditionsAsPathLength) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementConditionsBgpConditionsAsPathLength) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefindSetStatementConditionsBgpConditionsAsPathLength
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefindSetStatementConditionsBgpConditionsMatchAsPathSet b g p policy defind set statement conditions bgp conditions match as path set
//
// swagger:model BGPPolicyDefindSetStatementConditionsBgpConditionsMatchAsPathSet
type BGPPolicyDefindSetStatementConditionsBgpConditionsMatchAsPathSet struct {

	// as path set
	AsPathSet string `json:"asPathSet,omitempty"`

	// match set options
	MatchSetOptions string `json:"matchSetOptions,omitempty"`
}

// Validate validates this b g p policy defind set statement conditions bgp conditions match as path set
func (m *BGPPolicyDefindSetStatementConditionsBgpConditionsMatchAsPathSet) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policy defind set statement conditions bgp conditions match as path set based on context it is used
func (m *BGPPolicyDefindSetStatementConditionsBgpConditionsMatchAsPathSet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementConditionsBgpConditionsMatchAsPathSet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementConditionsBgpConditionsMatchAsPathSet) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefindSetStatementConditionsBgpConditionsMatchAsPathSet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefindSetStatementConditionsBgpConditionsMatchCommunitySet b g p policy defind set statement conditions bgp conditions match community set
//
// swagger:model BGPPolicyDefindSetStatementConditionsBgpConditionsMatchCommunitySet
type BGPPolicyDefindSetStatementConditionsBgpConditionsMatchCommunitySet struct {

	// community set
	CommunitySet string `json:"communitySet,omitempty"`

	// match set options
	MatchSetOptions string `json:"matchSetOptions,omitempty"`
}

// Validate validates this b g p policy defind set statement conditions bgp conditions match community set
func (m *BGPPolicyDefindSetStatementConditionsBgpConditionsMatchCommunitySet) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policy defind set statement conditions bgp conditions match community set based on context it is used
func (m *BGPPolicyDefindSetStatementConditionsBgpConditionsMatchCommunitySet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementConditionsBgpConditionsMatchCommunitySet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementConditionsBgpConditionsMatchCommunitySet) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefindSetStatementConditionsBgpConditionsMatchCommunitySet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefindSetStatementConditionsBgpConditionsMatchExtCommunitySet b g p policy defind set statement conditions bgp conditions match ext community set
//
// swagger:model BGPPolicyDefindSetStatementConditionsBgpConditionsMatchExtCommunitySet
type BGPPolicyDefindSetStatementConditionsBgpConditionsMatchExtCommunitySet struct {

	// community set
	CommunitySet string `json:"communitySet,omitempty"`

	// match set options
	MatchSetOptions string `json:"matchSetOptions,omitempty"`
}

// Validate validates this b g p policy defind set statement conditions bgp conditions match ext community set
func (m *BGPPolicyDefindSetStatementConditionsBgpConditionsMatchExtCommunitySet) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policy defind set statement conditions bgp conditions match ext community set based on context it is used
func (m *BGPPolicyDefindSetStatementConditionsBgpConditionsMatchExtCommunitySet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementConditionsBgpConditionsMatchExtCommunitySet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementConditionsBgpConditionsMatchExtCommunitySet) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefindSetStatementConditionsBgpConditionsMatchExtCommunitySet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefindSetStatementConditionsBgpConditionsMatchLargeCommunitySet b g p policy defind set statement conditions bgp conditions match large community set
//
// swagger:model BGPPolicyDefindSetStatementConditionsBgpConditionsMatchLargeCommunitySet
type BGPPolicyDefindSetStatementConditionsBgpConditionsMatchLargeCommunitySet struct {

	// community set
	CommunitySet string `json:"communitySet,omitempty"`

	// match set options
	MatchSetOptions string `json:"matchSetOptions,omitempty"`
}

// Validate validates this b g p policy defind set statement conditions bgp conditions match large community set
func (m *BGPPolicyDefindSetStatementConditionsBgpConditionsMatchLargeCommunitySet) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policy defind set statement conditions bgp conditions match large community set based on context it is used
func (m *BGPPolicyDefindSetStatementConditionsBgpConditionsMatchLargeCommunitySet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementConditionsBgpConditionsMatchLargeCommunitySet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementConditionsBgpConditionsMatchLargeCommunitySet) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefindSetStatementConditionsBgpConditionsMatchLargeCommunitySet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefindSetStatementConditionsMatchNeighborSet b g p policy defind set statement conditions match neighbor set
//
// swagger:model BGPPolicyDefindSetStatementConditionsMatchNeighborSet
type BGPPolicyDefindSetStatementConditionsMatchNeighborSet struct {

	// match set option
	MatchSetOption string `json:"matchSetOption,omitempty"`

	// neighbor set
	NeighborSet string `json:"neighborSet,omitempty"`
}

// Validate validates this b g p policy defind set statement conditions match neighbor set
func (m *BGPPolicyDefindSetStatementConditionsMatchNeighborSet) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policy defind set statement conditions match neighbor set based on context it is used
func (m *BGPPolicyDefindSetStatementConditionsMatchNeighborSet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementConditionsMatchNeighborSet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementConditionsMatchNeighborSet) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefindSetStatementConditionsMatchNeighborSet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefindSetStatementConditionsMatchPrefixSet b g p policy defind set statement conditions match prefix set
//
// swagger:model BGPPolicyDefindSetStatementConditionsMatchPrefixSet
type BGPPolicyDefindSetStatementConditionsMatchPrefixSet struct {

	// match set option
	MatchSetOption string `json:"matchSetOption,omitempty"`

	// prefix set
	PrefixSet string `json:"prefixSet,omitempty"`
}

// Validate validates this b g p policy defind set statement conditions match prefix set
func (m *BGPPolicyDefindSetStatementConditionsMatchPrefixSet) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policy defind set statement conditions match prefix set based on context it is used
func (m *BGPPolicyDefindSetStatementConditionsMatchPrefixSet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementConditionsMatchPrefixSet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefindSetStatementConditionsMatchPrefixSet) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefindSetStatementConditionsMatchPrefixSet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
