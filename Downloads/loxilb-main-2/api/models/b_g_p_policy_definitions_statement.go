// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BGPPolicyDefinitionsStatement b g p policy definitions statement
//
// swagger:model BGPPolicyDefinitionsStatement
type BGPPolicyDefinitionsStatement struct {

	// actions
	Actions *BGPPolicyDefinitionsStatementActions `json:"actions,omitempty"`

	// conditions
	Conditions *BGPPolicyDefinitionsStatementConditions `json:"conditions,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this b g p policy definitions statement
func (m *BGPPolicyDefinitionsStatement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicyDefinitionsStatement) validateActions(formats strfmt.Registry) error {
	if swag.IsZero(m.Actions) { // not required
		return nil
	}

	if m.Actions != nil {
		if err := m.Actions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefinitionsStatement) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	if m.Conditions != nil {
		if err := m.Conditions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this b g p policy definitions statement based on the context it is used
func (m *BGPPolicyDefinitionsStatement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicyDefinitionsStatement) contextValidateActions(ctx context.Context, formats strfmt.Registry) error {

	if m.Actions != nil {
		if err := m.Actions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefinitionsStatement) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	if m.Conditions != nil {
		if err := m.Conditions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatement) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefinitionsStatement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefinitionsStatementActions b g p policy definitions statement actions
//
// swagger:model BGPPolicyDefinitionsStatementActions
type BGPPolicyDefinitionsStatementActions struct {

	// bgp actions
	BgpActions *BGPPolicyDefinitionsStatementActionsBgpActions `json:"bgpActions,omitempty"`

	// route disposition
	RouteDisposition string `json:"routeDisposition,omitempty"`
}

// Validate validates this b g p policy definitions statement actions
func (m *BGPPolicyDefinitionsStatementActions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBgpActions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicyDefinitionsStatementActions) validateBgpActions(formats strfmt.Registry) error {
	if swag.IsZero(m.BgpActions) { // not required
		return nil
	}

	if m.BgpActions != nil {
		if err := m.BgpActions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this b g p policy definitions statement actions based on the context it is used
func (m *BGPPolicyDefinitionsStatementActions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBgpActions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicyDefinitionsStatementActions) contextValidateBgpActions(ctx context.Context, formats strfmt.Registry) error {

	if m.BgpActions != nil {
		if err := m.BgpActions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementActions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementActions) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefinitionsStatementActions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefinitionsStatementActionsBgpActions b g p policy definitions statement actions bgp actions
//
// swagger:model BGPPolicyDefinitionsStatementActionsBgpActions
type BGPPolicyDefinitionsStatementActionsBgpActions struct {

	// set as path prepend
	SetAsPathPrepend *BGPPolicyDefinitionsStatementActionsBgpActionsSetAsPathPrepend `json:"setAsPathPrepend,omitempty"`

	// set community
	SetCommunity *BGPPolicyDefinitionsStatementActionsBgpActionsSetCommunity `json:"setCommunity,omitempty"`

	// set ext community
	SetExtCommunity *BGPPolicyDefinitionsStatementActionsBgpActionsSetExtCommunity `json:"setExtCommunity,omitempty"`

	// set large community
	SetLargeCommunity *BGPPolicyDefinitionsStatementActionsBgpActionsSetLargeCommunity `json:"setLargeCommunity,omitempty"`

	// set local perf
	SetLocalPerf int64 `json:"setLocalPerf,omitempty"`

	// set med
	SetMed string `json:"setMed,omitempty"`

	// set next hop
	SetNextHop string `json:"setNextHop,omitempty"`
}

// Validate validates this b g p policy definitions statement actions bgp actions
func (m *BGPPolicyDefinitionsStatementActionsBgpActions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSetAsPathPrepend(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSetCommunity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSetExtCommunity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSetLargeCommunity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicyDefinitionsStatementActionsBgpActions) validateSetAsPathPrepend(formats strfmt.Registry) error {
	if swag.IsZero(m.SetAsPathPrepend) { // not required
		return nil
	}

	if m.SetAsPathPrepend != nil {
		if err := m.SetAsPathPrepend.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions" + "." + "setAsPathPrepend")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions" + "." + "setAsPathPrepend")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefinitionsStatementActionsBgpActions) validateSetCommunity(formats strfmt.Registry) error {
	if swag.IsZero(m.SetCommunity) { // not required
		return nil
	}

	if m.SetCommunity != nil {
		if err := m.SetCommunity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions" + "." + "setCommunity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions" + "." + "setCommunity")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefinitionsStatementActionsBgpActions) validateSetExtCommunity(formats strfmt.Registry) error {
	if swag.IsZero(m.SetExtCommunity) { // not required
		return nil
	}

	if m.SetExtCommunity != nil {
		if err := m.SetExtCommunity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions" + "." + "setExtCommunity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions" + "." + "setExtCommunity")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefinitionsStatementActionsBgpActions) validateSetLargeCommunity(formats strfmt.Registry) error {
	if swag.IsZero(m.SetLargeCommunity) { // not required
		return nil
	}

	if m.SetLargeCommunity != nil {
		if err := m.SetLargeCommunity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions" + "." + "setLargeCommunity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions" + "." + "setLargeCommunity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this b g p policy definitions statement actions bgp actions based on the context it is used
func (m *BGPPolicyDefinitionsStatementActionsBgpActions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSetAsPathPrepend(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSetCommunity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSetExtCommunity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSetLargeCommunity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicyDefinitionsStatementActionsBgpActions) contextValidateSetAsPathPrepend(ctx context.Context, formats strfmt.Registry) error {

	if m.SetAsPathPrepend != nil {
		if err := m.SetAsPathPrepend.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions" + "." + "setAsPathPrepend")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions" + "." + "setAsPathPrepend")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefinitionsStatementActionsBgpActions) contextValidateSetCommunity(ctx context.Context, formats strfmt.Registry) error {

	if m.SetCommunity != nil {
		if err := m.SetCommunity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions" + "." + "setCommunity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions" + "." + "setCommunity")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefinitionsStatementActionsBgpActions) contextValidateSetExtCommunity(ctx context.Context, formats strfmt.Registry) error {

	if m.SetExtCommunity != nil {
		if err := m.SetExtCommunity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions" + "." + "setExtCommunity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions" + "." + "setExtCommunity")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefinitionsStatementActionsBgpActions) contextValidateSetLargeCommunity(ctx context.Context, formats strfmt.Registry) error {

	if m.SetLargeCommunity != nil {
		if err := m.SetLargeCommunity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions" + "." + "setLargeCommunity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions" + "." + "setLargeCommunity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementActionsBgpActions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementActionsBgpActions) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefinitionsStatementActionsBgpActions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefinitionsStatementActionsBgpActionsSetAsPathPrepend b g p policy definitions statement actions bgp actions set as path prepend
//
// swagger:model BGPPolicyDefinitionsStatementActionsBgpActionsSetAsPathPrepend
type BGPPolicyDefinitionsStatementActionsBgpActionsSetAsPathPrepend struct {

	// as
	As string `json:"as,omitempty"`

	// repeat n
	RepeatN int64 `json:"repeatN,omitempty"`
}

// Validate validates this b g p policy definitions statement actions bgp actions set as path prepend
func (m *BGPPolicyDefinitionsStatementActionsBgpActionsSetAsPathPrepend) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policy definitions statement actions bgp actions set as path prepend based on context it is used
func (m *BGPPolicyDefinitionsStatementActionsBgpActionsSetAsPathPrepend) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementActionsBgpActionsSetAsPathPrepend) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementActionsBgpActionsSetAsPathPrepend) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefinitionsStatementActionsBgpActionsSetAsPathPrepend
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefinitionsStatementActionsBgpActionsSetCommunity b g p policy definitions statement actions bgp actions set community
//
// swagger:model BGPPolicyDefinitionsStatementActionsBgpActionsSetCommunity
type BGPPolicyDefinitionsStatementActionsBgpActionsSetCommunity struct {

	// options
	Options string `json:"options,omitempty"`

	// set community method
	SetCommunityMethod []string `json:"setCommunityMethod"`
}

// Validate validates this b g p policy definitions statement actions bgp actions set community
func (m *BGPPolicyDefinitionsStatementActionsBgpActionsSetCommunity) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policy definitions statement actions bgp actions set community based on context it is used
func (m *BGPPolicyDefinitionsStatementActionsBgpActionsSetCommunity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementActionsBgpActionsSetCommunity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementActionsBgpActionsSetCommunity) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefinitionsStatementActionsBgpActionsSetCommunity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefinitionsStatementActionsBgpActionsSetExtCommunity b g p policy definitions statement actions bgp actions set ext community
//
// swagger:model BGPPolicyDefinitionsStatementActionsBgpActionsSetExtCommunity
type BGPPolicyDefinitionsStatementActionsBgpActionsSetExtCommunity struct {

	// options
	Options string `json:"options,omitempty"`

	// set community method
	SetCommunityMethod []string `json:"setCommunityMethod"`
}

// Validate validates this b g p policy definitions statement actions bgp actions set ext community
func (m *BGPPolicyDefinitionsStatementActionsBgpActionsSetExtCommunity) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policy definitions statement actions bgp actions set ext community based on context it is used
func (m *BGPPolicyDefinitionsStatementActionsBgpActionsSetExtCommunity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementActionsBgpActionsSetExtCommunity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementActionsBgpActionsSetExtCommunity) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefinitionsStatementActionsBgpActionsSetExtCommunity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefinitionsStatementActionsBgpActionsSetLargeCommunity b g p policy definitions statement actions bgp actions set large community
//
// swagger:model BGPPolicyDefinitionsStatementActionsBgpActionsSetLargeCommunity
type BGPPolicyDefinitionsStatementActionsBgpActionsSetLargeCommunity struct {

	// options
	Options string `json:"options,omitempty"`

	// set community method
	SetCommunityMethod []string `json:"setCommunityMethod"`
}

// Validate validates this b g p policy definitions statement actions bgp actions set large community
func (m *BGPPolicyDefinitionsStatementActionsBgpActionsSetLargeCommunity) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policy definitions statement actions bgp actions set large community based on context it is used
func (m *BGPPolicyDefinitionsStatementActionsBgpActionsSetLargeCommunity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementActionsBgpActionsSetLargeCommunity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementActionsBgpActionsSetLargeCommunity) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefinitionsStatementActionsBgpActionsSetLargeCommunity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefinitionsStatementConditions b g p policy definitions statement conditions
//
// swagger:model BGPPolicyDefinitionsStatementConditions
type BGPPolicyDefinitionsStatementConditions struct {

	// bgp conditions
	BgpConditions *BGPPolicyDefinitionsStatementConditionsBgpConditions `json:"bgpConditions,omitempty"`

	// match neighbor set
	MatchNeighborSet *BGPPolicyDefinitionsStatementConditionsMatchNeighborSet `json:"matchNeighborSet,omitempty"`

	// match prefix set
	MatchPrefixSet *BGPPolicyDefinitionsStatementConditionsMatchPrefixSet `json:"matchPrefixSet,omitempty"`
}

// Validate validates this b g p policy definitions statement conditions
func (m *BGPPolicyDefinitionsStatementConditions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBgpConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchNeighborSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchPrefixSet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicyDefinitionsStatementConditions) validateBgpConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.BgpConditions) { // not required
		return nil
	}

	if m.BgpConditions != nil {
		if err := m.BgpConditions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefinitionsStatementConditions) validateMatchNeighborSet(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchNeighborSet) { // not required
		return nil
	}

	if m.MatchNeighborSet != nil {
		if err := m.MatchNeighborSet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "matchNeighborSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "matchNeighborSet")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefinitionsStatementConditions) validateMatchPrefixSet(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchPrefixSet) { // not required
		return nil
	}

	if m.MatchPrefixSet != nil {
		if err := m.MatchPrefixSet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "matchPrefixSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "matchPrefixSet")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this b g p policy definitions statement conditions based on the context it is used
func (m *BGPPolicyDefinitionsStatementConditions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBgpConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatchNeighborSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatchPrefixSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicyDefinitionsStatementConditions) contextValidateBgpConditions(ctx context.Context, formats strfmt.Registry) error {

	if m.BgpConditions != nil {
		if err := m.BgpConditions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefinitionsStatementConditions) contextValidateMatchNeighborSet(ctx context.Context, formats strfmt.Registry) error {

	if m.MatchNeighborSet != nil {
		if err := m.MatchNeighborSet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "matchNeighborSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "matchNeighborSet")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefinitionsStatementConditions) contextValidateMatchPrefixSet(ctx context.Context, formats strfmt.Registry) error {

	if m.MatchPrefixSet != nil {
		if err := m.MatchPrefixSet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "matchPrefixSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "matchPrefixSet")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementConditions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementConditions) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefinitionsStatementConditions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefinitionsStatementConditionsBgpConditions b g p policy definitions statement conditions bgp conditions
//
// swagger:model BGPPolicyDefinitionsStatementConditionsBgpConditions
type BGPPolicyDefinitionsStatementConditionsBgpConditions struct {

	// afi safi in
	AfiSafiIn []string `json:"afiSafiIn"`

	// as path length
	AsPathLength *BGPPolicyDefinitionsStatementConditionsBgpConditionsAsPathLength `json:"asPathLength,omitempty"`

	// match as path set
	MatchAsPathSet *BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchAsPathSet `json:"matchAsPathSet,omitempty"`

	// match community set
	MatchCommunitySet *BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchCommunitySet `json:"matchCommunitySet,omitempty"`

	// match ext community set
	MatchExtCommunitySet *BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchExtCommunitySet `json:"matchExtCommunitySet,omitempty"`

	// match large community set
	MatchLargeCommunitySet *BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchLargeCommunitySet `json:"matchLargeCommunitySet,omitempty"`

	// next hop in list
	NextHopInList []string `json:"nextHopInList"`

	// route type
	RouteType string `json:"routeType,omitempty"`

	// rpki
	Rpki string `json:"rpki,omitempty"`
}

// Validate validates this b g p policy definitions statement conditions bgp conditions
func (m *BGPPolicyDefinitionsStatementConditionsBgpConditions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAsPathLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchAsPathSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchCommunitySet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchExtCommunitySet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchLargeCommunitySet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicyDefinitionsStatementConditionsBgpConditions) validateAsPathLength(formats strfmt.Registry) error {
	if swag.IsZero(m.AsPathLength) { // not required
		return nil
	}

	if m.AsPathLength != nil {
		if err := m.AsPathLength.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "asPathLength")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "asPathLength")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefinitionsStatementConditionsBgpConditions) validateMatchAsPathSet(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchAsPathSet) { // not required
		return nil
	}

	if m.MatchAsPathSet != nil {
		if err := m.MatchAsPathSet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchAsPathSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchAsPathSet")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefinitionsStatementConditionsBgpConditions) validateMatchCommunitySet(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchCommunitySet) { // not required
		return nil
	}

	if m.MatchCommunitySet != nil {
		if err := m.MatchCommunitySet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchCommunitySet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchCommunitySet")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefinitionsStatementConditionsBgpConditions) validateMatchExtCommunitySet(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchExtCommunitySet) { // not required
		return nil
	}

	if m.MatchExtCommunitySet != nil {
		if err := m.MatchExtCommunitySet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchExtCommunitySet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchExtCommunitySet")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefinitionsStatementConditionsBgpConditions) validateMatchLargeCommunitySet(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchLargeCommunitySet) { // not required
		return nil
	}

	if m.MatchLargeCommunitySet != nil {
		if err := m.MatchLargeCommunitySet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchLargeCommunitySet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchLargeCommunitySet")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this b g p policy definitions statement conditions bgp conditions based on the context it is used
func (m *BGPPolicyDefinitionsStatementConditionsBgpConditions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAsPathLength(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatchAsPathSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatchCommunitySet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatchExtCommunitySet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatchLargeCommunitySet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicyDefinitionsStatementConditionsBgpConditions) contextValidateAsPathLength(ctx context.Context, formats strfmt.Registry) error {

	if m.AsPathLength != nil {
		if err := m.AsPathLength.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "asPathLength")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "asPathLength")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefinitionsStatementConditionsBgpConditions) contextValidateMatchAsPathSet(ctx context.Context, formats strfmt.Registry) error {

	if m.MatchAsPathSet != nil {
		if err := m.MatchAsPathSet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchAsPathSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchAsPathSet")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefinitionsStatementConditionsBgpConditions) contextValidateMatchCommunitySet(ctx context.Context, formats strfmt.Registry) error {

	if m.MatchCommunitySet != nil {
		if err := m.MatchCommunitySet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchCommunitySet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchCommunitySet")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefinitionsStatementConditionsBgpConditions) contextValidateMatchExtCommunitySet(ctx context.Context, formats strfmt.Registry) error {

	if m.MatchExtCommunitySet != nil {
		if err := m.MatchExtCommunitySet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchExtCommunitySet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchExtCommunitySet")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicyDefinitionsStatementConditionsBgpConditions) contextValidateMatchLargeCommunitySet(ctx context.Context, formats strfmt.Registry) error {

	if m.MatchLargeCommunitySet != nil {
		if err := m.MatchLargeCommunitySet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchLargeCommunitySet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchLargeCommunitySet")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementConditionsBgpConditions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementConditionsBgpConditions) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefinitionsStatementConditionsBgpConditions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefinitionsStatementConditionsBgpConditionsAsPathLength b g p policy definitions statement conditions bgp conditions as path length
//
// swagger:model BGPPolicyDefinitionsStatementConditionsBgpConditionsAsPathLength
type BGPPolicyDefinitionsStatementConditionsBgpConditionsAsPathLength struct {

	// operator
	Operator string `json:"operator,omitempty"`

	// value
	Value int64 `json:"value,omitempty"`
}

// Validate validates this b g p policy definitions statement conditions bgp conditions as path length
func (m *BGPPolicyDefinitionsStatementConditionsBgpConditionsAsPathLength) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policy definitions statement conditions bgp conditions as path length based on context it is used
func (m *BGPPolicyDefinitionsStatementConditionsBgpConditionsAsPathLength) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementConditionsBgpConditionsAsPathLength) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementConditionsBgpConditionsAsPathLength) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefinitionsStatementConditionsBgpConditionsAsPathLength
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchAsPathSet b g p policy definitions statement conditions bgp conditions match as path set
//
// swagger:model BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchAsPathSet
type BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchAsPathSet struct {

	// as path set
	AsPathSet string `json:"asPathSet,omitempty"`

	// match set options
	MatchSetOptions string `json:"matchSetOptions,omitempty"`
}

// Validate validates this b g p policy definitions statement conditions bgp conditions match as path set
func (m *BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchAsPathSet) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policy definitions statement conditions bgp conditions match as path set based on context it is used
func (m *BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchAsPathSet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchAsPathSet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchAsPathSet) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchAsPathSet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchCommunitySet b g p policy definitions statement conditions bgp conditions match community set
//
// swagger:model BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchCommunitySet
type BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchCommunitySet struct {

	// community set
	CommunitySet string `json:"communitySet,omitempty"`

	// match set options
	MatchSetOptions string `json:"matchSetOptions,omitempty"`
}

// Validate validates this b g p policy definitions statement conditions bgp conditions match community set
func (m *BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchCommunitySet) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policy definitions statement conditions bgp conditions match community set based on context it is used
func (m *BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchCommunitySet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchCommunitySet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchCommunitySet) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchCommunitySet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchExtCommunitySet b g p policy definitions statement conditions bgp conditions match ext community set
//
// swagger:model BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchExtCommunitySet
type BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchExtCommunitySet struct {

	// community set
	CommunitySet string `json:"communitySet,omitempty"`

	// match set options
	MatchSetOptions string `json:"matchSetOptions,omitempty"`
}

// Validate validates this b g p policy definitions statement conditions bgp conditions match ext community set
func (m *BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchExtCommunitySet) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policy definitions statement conditions bgp conditions match ext community set based on context it is used
func (m *BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchExtCommunitySet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchExtCommunitySet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchExtCommunitySet) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchExtCommunitySet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchLargeCommunitySet b g p policy definitions statement conditions bgp conditions match large community set
//
// swagger:model BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchLargeCommunitySet
type BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchLargeCommunitySet struct {

	// community set
	CommunitySet string `json:"communitySet,omitempty"`

	// match set options
	MatchSetOptions string `json:"matchSetOptions,omitempty"`
}

// Validate validates this b g p policy definitions statement conditions bgp conditions match large community set
func (m *BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchLargeCommunitySet) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policy definitions statement conditions bgp conditions match large community set based on context it is used
func (m *BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchLargeCommunitySet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchLargeCommunitySet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchLargeCommunitySet) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefinitionsStatementConditionsBgpConditionsMatchLargeCommunitySet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefinitionsStatementConditionsMatchNeighborSet b g p policy definitions statement conditions match neighbor set
//
// swagger:model BGPPolicyDefinitionsStatementConditionsMatchNeighborSet
type BGPPolicyDefinitionsStatementConditionsMatchNeighborSet struct {

	// match set option
	MatchSetOption string `json:"matchSetOption,omitempty"`

	// neighbor set
	NeighborSet string `json:"neighborSet,omitempty"`
}

// Validate validates this b g p policy definitions statement conditions match neighbor set
func (m *BGPPolicyDefinitionsStatementConditionsMatchNeighborSet) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policy definitions statement conditions match neighbor set based on context it is used
func (m *BGPPolicyDefinitionsStatementConditionsMatchNeighborSet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementConditionsMatchNeighborSet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementConditionsMatchNeighborSet) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefinitionsStatementConditionsMatchNeighborSet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicyDefinitionsStatementConditionsMatchPrefixSet b g p policy definitions statement conditions match prefix set
//
// swagger:model BGPPolicyDefinitionsStatementConditionsMatchPrefixSet
type BGPPolicyDefinitionsStatementConditionsMatchPrefixSet struct {

	// match set option
	MatchSetOption string `json:"matchSetOption,omitempty"`

	// prefix set
	PrefixSet string `json:"prefixSet,omitempty"`
}

// Validate validates this b g p policy definitions statement conditions match prefix set
func (m *BGPPolicyDefinitionsStatementConditionsMatchPrefixSet) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policy definitions statement conditions match prefix set based on context it is used
func (m *BGPPolicyDefinitionsStatementConditionsMatchPrefixSet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementConditionsMatchPrefixSet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicyDefinitionsStatementConditionsMatchPrefixSet) UnmarshalBinary(b []byte) error {
	var res BGPPolicyDefinitionsStatementConditionsMatchPrefixSet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
